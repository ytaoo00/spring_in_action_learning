This is a git repo used to document the learning process for Spring in action.

Chapter 0:
	IoC: The container will create the objects, wire them together, configure them, and manage their complete life cycle from creation till destruction. The Spring container uses DI to manage the components that make up an application. These objects are called Spring Beans, which we will discuss in the next chapter.
		for high level interpertation this container manage "a bag of objects"
	beans: an object that is instantiated, assembled, and otherwise managed by a Spring IoC container
	
	@Autowired vs @Bean high level
	    @Bean tells Spring 'here is an instance of this class, please keep hold of it and give it back to me when I ask'.
	    @Autowired says 'please give me an instance of this class, for example, one that I created with an @Bean annotation earlier'.



Chapter 1:
	Spring project structure is similiar to a typical Maven or Gradle project structure, where application source code is placed under src/main/java, test code is placed under src/test/java, and non-Java resources are placed under src/main/resources.
	mvnw and mvnw.cmd: maven wrapper scripts
	pom.xml: maven build specification.
	####Application.java: Spring boot main class that bootstraps the project
	application.properties: specify configuration properties.
	static: where all static contents that serve to the browser go to. Ex. Image, CSS, JavaScript, etc.
	templates: template files that used to render content to the browser.
	######ApplicationTests.java: orginally just to ensure that Spring application content loads successfuly.
	
	Basic controller(without populating any model data):
	@Controller: an annotation primarily used to identify this class as a component for component scanning. Allow autoconfiguration creates an instance of the clas as a bean in the Spring application context. 
	@GetMapping("/"): indicates that if an HTTP GET request is received for the root path, then this method should handle that request. It does so by returning a String value of home.
	This String value is interpreted as the logical name of a view. The template name is derived from the logical view name by prefixing it with /templates/ and postfixing it with .html
	In this example here, we return home as the logical name of this view, therefore the path is /src/main/resources/templates/home.html.
	The chosen template engine is Thymeleaf. 
	
	The core Spring Framework: provides the core container and dependency injection framework, Spring MVC which can be used for REST API and HTML output, template based JDBC support, reactive-style programming. 
	
	Spring Boot: starter dependencies, autoconfiguration, the actuator which provides runtime insight into the inner workings of an application, flexible specification of environment properties, additional testing support. 
	
	Spring Data: provides the ability to define application's data repositories as simple java interface and capable of working with different kind of DBs. 
	
	Spring Security: authentication, authorization, and API secuirty. 
	
	Spring Integration and Spring Batch: help with the process of integrate with other application.
	
	Spring Cloud: cloud support.
	
	
Chapter 2:
	MVC: model view controller;
	Controller: fetch and process data.
	View: render that data into HTML that will be displayed in the broser.
	Model: similar to database. Model is an object that ferries data between a controller and whatever view is charged with rendering that data.
	data that’s placed in Model attributes is copied into the servlet response attributes, where the view can find them
	View libraries such as Thymeleaf are designed to be decoupled from any particular web framework. As such, they’re unaware of Spring’s model abstraction and are unable to work with the data that the controller places in Model . But they can work with servlet request attributes. Therefore, before Spring hands the request over to a view, it copies the model data into request attributes that Thymeleaf and other view-templating options have ready access to.
	//Thymeleaf basic: 
	//<p th:text="${message}">placeholder message</p> which will render the servlet request attribute whose key is message into HTML.
	//th:each iterates over a collection of elements, rendering the HTML once for each item in the collection
	//The <form> doesn’t declare an action attribute. This means that when the form is submitted, the browser will gather up all the data in the form and send it to the server in an HTTP POST request to the same path for which a GET request displayed the form ----the /design path.
	//Thymeleaf offers access to the Errors object via the fields property and with its th:errors attribute.
	To apply validation in Spring MVC, you need to:
		1) Declare validation rules on the class that is to be validated
		2)Specify that validation should be performed in the controller methods that
require validation
		3)Modify the form views to display validation errors.
		//handle receiving end of the POST request by the <form> 
	The @Valid annotation tells Spring MVC to perform validation on the submitted  object after it’s bound to the submitted form data and before the processDesign() method is called.
	If there are any validation errors, the details of those errors will be captured in an Errors object that’s passed into processDesign()
	when a controller is simple enough that it doesn’t populate a model or process input one can define a controller that does nothing but forward the request to a view. 
	
	Chapter 3:
	Why use JDBC or JPA:
	if not:
		too much on code that creates a connection, creates a statement, and cleans up by closing the connection, statement, and result set.
	 	any number of things could go wrong when creating the connection or the statement, or when performing the query. This requires that you catch a SQLException , which may or may not be helpful in figuring out what went wrong or how to address the problem.
		SQLException is a checked exception, which requires handling in a catch block.But the most common problems, such as failure to create a connection to the database or a mistyped query, can’t possibly be addressed in a catch block and are likely to be rethrown for handling upstream.
	
	Using JDBC:
	When persisting objects to a db, it is generally a good idea to have one field that uniquely idfentifies the object and the date and time that the object is created.
	Defining Repositories:
	figure out what operation does the given repository need to perform and write an interface class to address those methods. 
	Then write and implementation of the interface that uses JdbcTemplate to query the db.
	If there’s a file named schema.sql/data.sql in the root of the application’s classpath, then the SQL in that file will be executed against the database when the application starts. Therefore, you should place the contents of listing 3.8 in your project as a file named schema.sql in the src/main/resources folder.
	Two ways to save data with JdbcTemplate:
		Directly, using the update() method or
		Using the SimpleJdbcInsert wrapper class
	@ModelAttribute
	you can use the @ModelAttribute annotation on a method argument to access an attribute from the model or have it be instantiated if not present. The model attribute is also overlain with values from HTTP Servlet request parameters whose names match to field names. This is referred to as data binding, and it saves you from having to deal with parsing and converting individual query parameters and form fields.
	first usage: define objects which should be part of a Model
			@ModelAttribute(name = "order")
			public Order order() {
				return new Order();
			}
	second usage: have Spring MVC supply the object to a Controller method
		public String processDesign(@Valid Taco design, Errors errors, 
			@ModelAttribute Order order) {
		
			...
			Taco saved = designRepo.save(design);
			order.addDesign(saved);
			return "redirect:/orders/current";
			
			}
	
	You’ll recall that saving a taco involved not only saving the taco’s name and creation time to the Taco table, but also saving a reference to the ingredients associated with the taco to the Taco_Ingredients table. And you’ll also recall that this required you to know the Taco ’s ID, which you obtained using KeyHolder and PreparedStatementCreator .

	An equivalent yet simpler way to do it is to use simplejdbcinsert. 
	
	3.2 Spring Data JPA—JPA persistence against a relational database
	For Spring Data JPA—there’s no need to write an implementation! When the application starts, Spring Data JPA automatically generates an implementation on the fly. This means the repositories are ready to use from the get-go. Just inject them into the controllers like you did for the JDBC-based implementations, and you’re done.
	One can also coustomizing JPA repositories that meet requirement beyond persistence.
	To do so, when need to add a method declaration in the Repository interface
	When generating the repository implementation, Spring Data examines any methods in the repository interface, parses the method name, and attempts to understand the method’s purpose in the context of the persisted object read chapter 3.2.4 for more info. 
	!!!!!!!!!!!this is magic ..... attempt to look into the JPA later!!!!!!!!!!!!!!!!!
	also the trick to add data.sql and schema.sql into classpath to have the application to preload it doesn't work for JPA. The book solve it by add a CommandLineRunner dataLoader in the Application.java.
	
	
	Chapter 4 Spring Security
	when the application starts, autoconfiguration will detect that Spring Security
is in the classpath and will set up some basic security configuration once your add the Spring Boot Security starter dependency.
	by doing so, one can get:
		1) All HTTP request paths require authentication
		2) No specific roles or authorities are required
		3) There is no login page
		4) Authentication is prompted with HTTP basic authentication
		5) There is only one user, the username is user
	to do more, you will need to write some explicit configuration, overriding what autoconfiuration has given you.
	Adding user store:
		the Spring Security offers several options for configuring a user store, including:
		An in-memory user store
		A JDBC-based user store
		An LDAP-baced user store
		A custom user details service
	and one can configure it by overriding a configure() mehtod defined in the WebSecurityConfigurerAdapter. 
	In-memory User Store: 
		only have a handful of users, none of which are likely to change. so maybe enough to fedine those users as part of the security configuration. 
		convenient for testing purposes or for very simple applications. hard to edit user.
	JDBC-based user store: 
		without build a customized user detail queries, Spring expects that certain tables exist wher the user data will be kept. and pre-define a set of queries for authentication process. To use it, you need to define and populating the tables in your database accordingly. The query provided include authentication, basic authorization and group authorities query. 
		If your schema doesn't match, you can define customized user detail queries. 
		The authentication query selects the username, password, and enabled status. The authorities query selects zero or more rows containing the username and a granted authority. The group authorities query selects zero or more rows, each with a group ID, a group name, and an authority.
		To make the application even more security -> encode the password.
		it is important to remember that password in the database is never decoded.
		the password users enter at login is encoded using the same algorithms and then compared with the ecoded password in the db. where PasswordEncoder offers two methods: encode(CharSequence rawPassword) and matches(CharSequence rawPassword, String encodedPassword)
	LDAP based user store:
		LDAP stands for Lightweight Directory Access Protocol, which is a directory service protocol that runs on a layer above TCP/IP stack. It provides a mechanism used to connect to, search and modify internet directories.
		The default strategy for authenticating against LDAP is to perform a bind operation, authenticating the user directly to the LDAP server. Another option is to perform a
comparison operation. This involves sending the entered password to the LDAP directory and asking the server to compare the password against a user’s password attribute. Because the comparison is done within the LDAP server, the actual password remains secret.
		another good practice is to use the passwordEncoder so we ensure the attempted password(aka the password sent to server) is also encrptyed. 
		By default, Spring Security’s LDAP authentication assumes that the LDAP server is listening on port 33389 on localhost. But if your LDAP server is on another machine,
you can use the contextSource() method to configure the location.
		Spring Security can provide an embedded LDAP server. Instead of setting the URL to a remote LDAP server, you can specify the root suffix for the embedded server via the root() method:for example .root("dc=tacocould, dc=com")
		When the LDAP server starts, it will attempt to load data from any LDIF files that it can find in the classpath. LDIF (LDAP Data Interchange Format) is a standard way of representing LDAP data in a plain text file. Each record is composed of one or more lines, each containing a name:value pair. Records are separated from each other by blank lines.
		Or, one can explicitly tell Spring which LDIF file get loaded by calling the ldif() method. 
		
		Notice that at this point the application will still require login to all pages. But it does not make sense to ask the user to login before he register. 
		TO solve this, there is another configure() method in WebSecurityConfigurerAdapter which accpetes HttpSecurity object, which can be used to configure how security is handled at web level
		One can configure HttpSecurity to do following:
			1) Requring that certain security conditions be met before allowing a request to be served.
			2) Configuring a custom login page
			3) Enabling users to log out of the application
			4) Configuring cross-sit request forgery protection.
		!!The order of these rules is important. Security rules declared first take precedence over those declared lower down.
		
		**loginProcessingUrl("url")
		if no url offered, by default it is /login
		if /authenticate offered:
			/authenticate GET - the login form
    			/authenticate POST - process the credentials and if valid authenticate the user
    			/authenticate?error GET - redirect here for failed authentication attempts
    			/authenticate?logout GET - redirect here after successfully logging out
		one can also specify this url to anything ${url}
		just make sure the form action send the data to the same url.
	CSRF: Cross-site request forgery
		this is a security attack which involves subjecting a user to code on a maliciously designed web page that automatically submits a form to another application on behalf of a user. 
		for example, a user may be presented with a form on an attacker’s website that automatically posts to a URL on the user’s banking website.
		to prevent this, applications can generate a CSRF token upon displaying a form, place that token in a hidden field, and then stow it for later use on the server. 
		when the form is submitted, the token is sent back to the server along with the rest of the form data.
		the request is then intercepted by the server and compared with the token that was orignally generated. Only if the token matches then the server will process the request. 
	To determine who the current user is in the application:
		1) inject a principal object into the controller method.
		2) inject an authentication object into the controller method
		3) use securityContextHolder to get at the security context
		4) Use an @AuthenticationPrincipal annotated method. 
		
	Chapter 5: Configuration
		Configuration properties are nothing more than properties on beans in the Spring application context that can be set from one of several property sources, including JVM system properties, command-line arguments, and environment variables.
		Two different kinds of configuration in Spring:
			1) Bean wiring: Configuration that declares application components to be created as beans in the Spring application context and how they should be inject into each other.
			2) Property inject: Configurationthat sets values on beans in the Spring application context. 
		Those two types of configurations are often declared explicitly in the same place. For example, @Bean annotated method is likely to both instantiate a bean and then set values to its properties. 
		@ConfigurationProperties are in fact often placed on beans whose sole purpose in the application is to be holders of configuration data. This keeps configuration-specific details out of the controllers and other application classes.
		It is also a good practice to create metadata concerning the configuration property
	
	Chapter 6:
		@RestController tells Spring that all handler methods in the controller should have their return value written directly to the body of the response, rather than being carried in the model to a view for rendering.
		the Angular portion of the application will be running on a separate host and/or port from the API (at least for now), the web browser will prevent your Angular client from consuming the API. This restriction can be overcome by including CORS (Cross-Origin Resource Sharing) headers in the server responses. Spring makes it easy to apply CORS with the @CrossOrigin annotation. As applied here, @CrossOrigin allows clients from any domain toconsume the API.
		In the case of a POST request, an HTTP status of 201 (CREATED) is more descriptive. It tells the client that not only was the request successful, but a resource was created as a result. It’s always a good idea to use @ResponseStatus where appropriate to communicate the most descriptive and accurate HTTP status code to the client.
		
    POST to a URL creates a child resource at a server defined URL.
    PUT to a URL creates/replaces the resource in its entirety at the client defined URL.
    PATCH to a URL updates part of the resource at that client defined URL.

	Although it’s true that PUT is often used to update resource data, it’s actually the semantic opposite of GET . Whereas GET requests are for transferring data from the server to the client, PUT requests are for sending data from the client to the server.
	In that sense, PUT is really intended to perform a wholesale replacement operation rather than an update operation. In contrast, the purpose of HTTP PATCH is to perform a patch or partial update of resource data.
	PUT does a wholesale replacement of the resource data, HTTP PATCH requests and
Spring’s @PatchMapping are good for partial update.
	
		Hypermedia as the Engine of Application State, or HATEOAS, is a means of creating self-describing APIs wherein resources returned from an API contain links to related resources. This enables clients to navigate an API with minimal understanding of the API’s URLs. Instead, it understands relationships between the resources served by the API and uses its understanding of those relationships to discover the API’s URLs as it traverses those relationships.
		This particular flavor of HATEOAS is known as HAL (Hypertext Application Language; http://stateless.co/hal_specification.html), a simple and commonly used format for embedding hyperlinks in JSON responses.
		Basically each element would have self links to reference the resources. Should a client application need to perform an HTTP request, it deoesn;t need to be developed with any knowledge of what the resource's URL would look like. Instead it knows to ask for the self link. 
		Spring HATEOAS provides two primary types that represent hyperlinked resources: Resource and Resources . The Resource type represents a single resource, whereas Resources is a collection of resources. Both types are capable of carrying links to other resources. When returned from a Spring MVC REST controller method, the links they carry will be included in the JSON (or XML) received by the client.
	Spring Data REST is another member of the Spring Data family that automatically creates REST APIs for repositories created by Spring Data. By doing little more than adding Spring Data REST to your build, you get an API with operations for each repository interface you’ve defined.
	
	
