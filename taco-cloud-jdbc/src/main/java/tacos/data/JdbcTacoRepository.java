package tacos.data;

import java.sql.Timestamp;
import java.sql.Types;
import java.util.Arrays;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.PreparedStatementCreatorFactory;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.stereotype.Repository;
import tacos.Ingredient;
import tacos.Taco;

@Repository
public class JdbcTacoRepository implements TacoRepository{
	
	private JdbcTemplate jdbc;
	
	public JdbcTacoRepository(JdbcTemplate jdbc) {
		this.jdbc = jdbc;
	}
	
	//save the essential taco design detail(ex. name and time of the creation)
	//then insert one row into Taco)Ingredients for each ingredient in the Taco obj
	@Override
	public Taco save(Taco taco) {
		long tacoId = saveTacoInfo(taco); //start by calling saveTacoInfo
		// then uses the taco ID returned from that method to call 
		//saveIngredientToTaco() , which saves each ingredient.
		taco.setId(tacoId); //
		for (Ingredient ingredient : taco.getIngredients()) {
			saveIngredientToTaco(ingredient, tacoId);
		}
		return taco;
	}
	
	private long saveTacoInfo(Taco taco) {
		// we need to know the ID generated by the db so that we can reference it in each of the ingredients
		//the update() method can not help we get at the generate id
		// we need KeyHolder which will prove the generated taco ID
		//in order to use KeyHolder, we need a PreparedStatementCreator
		taco.setCreatedAt(new Date());
		// To create a PreparedStatementCreator, we need a PreparedStatementCreatorFactory
		// which takes in he SQL you want to execute, as well as the types of each query parameter
		PreparedStatementCreatorFactory pscf = new PreparedStatementCreatorFactory(
				"Insert into Taco(name, createdAt) values(?,?)", Types.VARCHAR, Types.TIMESTAMP);
		pscf.setReturnGeneratedKeys(Boolean.TRUE); //somehow without this it won't work
		//then we create a new PreparedStatementCreator on that factory
		//by passing in the values needed in the query parameters
		PreparedStatementCreator psc = pscf.newPreparedStatementCreator(
				Arrays.asList(taco.getName(), new Timestamp(taco.getCreatedAt().getTime())));
		KeyHolder keyHolder = new GeneratedKeyHolder();
		jdbc.update(psc, keyHolder);
		return keyHolder.getKey().longValue();
	}
	
	private void saveIngredientToTaco(
			Ingredient ingredient, long tacoId) {
		jdbc.update(
				"insert into Taco_Ingredients (taco, ingredient) " +
				"values (?, ?)",
				tacoId, ingredient.getId());
	}
}
